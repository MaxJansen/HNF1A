occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 1) {
n <- 10                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (grepl("TT", runs, fixed = TRUE))
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 1) {
n <- 10                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (grepl("TT", runs, fixed = TRUE))
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 1) {
n <- 10                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (grepl("TT", runs, fixed = TRUE))
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 10000
occurrences <- ""
while(totalruns < 1) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (grepl("TTTTTT", runs, fixed = TRUE))
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (grepl("TTTTTT", runs, fixed = TRUE))
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (grep("TTTTTT", runs, fixed = TRUE))
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
occurrences
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (grep("TTTTTTTT", runs, fixed = TRUE))
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (grepl("TTTTTTTT", runs, fixed = TRUE))
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- (ifelse(grepl("TTTTTT", runs, fixed = TRUE), 0, 1)
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- ifelse(grepl("TTTTTT", runs, fixed = TRUE), 0, 1)
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- ifelse(grepl("TTTTTT", runs, fixed = TRUE), 1, 0)
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
occurrences
countCharOccurrences("1", occurrences)
countCharOccurrences <- function(char, s) {
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
countCharOccurrences("1", occurrences)
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- ifelse(grepl("TTTTTT", runs, fixed = TRUE), 1, 0)
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
countCharOccurrences <- function(char, s) {
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
countCharOccurrences("1", occurrences)
totalruns <- 0
occurrences <- ""
while(totalruns < 100000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- ifelse(grepl("TTTTTT", runs, fixed = TRUE), 1, 0)
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
countCharOccurrences <- function(char, s) {
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
count_1 <- countCharOccurrences("1", occurrences)
x = count_1/nchar(occurrences) *100
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- ifelse(grepl("TTTTTT", runs, fixed = TRUE), 1, 0)
occurrence <- ifelse(grepl("HHHHHH", runs, fixed = TRUE), 1, 0)
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
countCharOccurrences <- function(char, s) {
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
count_1 <- countCharOccurrences("1", occurrences)
x = count_1/nchar(occurrences) *100
totalruns <- 0
occurrences <- ""
while(totalruns < 10000) {
n <- 100                                          # get this many 1s in a row
count <- 0                                # keep track of current run, and how many total
runs <- ""
while(count < n) {                                 # while current run is less than desired
count <- count+1                              # increment count
runs <- ifelse(sample(0:1, 1)==0, paste0(runs,"H", collapse = " "), paste0(runs,"T", collapse = " "))     # do a flip, if 0 then reset runs, else increment runs
}
occurrence <- ifelse(grepl("TTTTTT", runs, fixed = TRUE), 1, 0)
if(occurrence == 0 ) {
occurrence <- ifelse(grepl("HHHHHH", runs, fixed = TRUE), 1, 0)
}
occurrences <- paste0(occurrences, occurrence, collapse = " ")
totalruns <- totalruns+1
}
countCharOccurrences <- function(char, s) {
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
count_1 <- countCharOccurrences("1", occurrences)
x = count_1/nchar(occurrences) *100
copdat <- read.delim("clipboard", header = FALSE, sep = " ")
View(copdat)
copdat <- read.delim("clipboard", header = FALSE, sep = " ")
View(copdat)
copdat <- read.delim("clipboard", header = FALSE, sep = " ")
View(copdat)
coplarge <- read.delim("clipboard", header = FALSE, sep = " ")
View(coplarge)
copnew <- copdat[-c(17),]
copnew <- coplarge[-c(17),]
View(coplarge)
View(copnew)
copnew$V11 <- gsub(",", "", copnew$V11)
copnew$V17 <- gsub(",", "", copnew$V17)
View(copnew)
coplarge <- read.delim("clipboard", header = FALSE, sep = " ")
View(coplarge)
coplarge <- read.delim("clipboard", header = FALSE, sep = " ")
copnew <- coplarge[-c(16,33),]
View(copnew)
heatmapR
help("heatmap")
version
gplots
helpgplots
help(gplots)
library(gplots)
library(pproc)
library(prroc)
library(PRROC)
install.packages("PRROC")
getwd()
setwd("./Oxford 2.0/HNF1A/Tables/raw_read_count")
getwd()
setwd("../../../Scripts/HNF1A)
""
"
setwd("../../../Scripts/HNF1A")
getwd()
lint("2.large_table.R")
library(linter)
library(lintr)
lint("2.large_table.R")
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
unts. ###
#Import reads from both directions, change working directory accordingly
setwd("./Oxford 2.0/HNF1A/Tables/raw_read_count")
raw_count_files <- list.files(path = ".", pattern = "Batch")
for (i in 1:length(raw_count_files)) assign(raw_count_files[i],
read.csv(raw_count_files[i], header = FALSE))
#Already Checked if all paired Batch files have equal number of lines using wc -l in bash
#Check if fastq _1 and _2 reads have equal number of raw read counts
#Function to compare
compare_reads1_2 <- function(Batchread1, Batchread2) {
for (i in seq(2, dim(Batchread1)[1], 2)) {
if (Batchread1[i, ] != Batchread2[i, ]) {
print("inconsistent reads")
}
}
}
setwd("./Oxford 2.0/HNF1A/Tables/raw_read_count")
#Import reads from both directions, change working directory accordingly
setwd("~/Oxford 2.0/HNF1A/Tables/raw_read_count")
raw_count_files <- list.files(path = ".", pattern = "Batch")
for (i in 1:length(raw_count_files)) assign(raw_count_files[i],
read.csv(raw_count_files[i], header = FALSE))
#Already Checked if all paired Batch files have equal number of lines using wc -l in bash
#Check if fastq _1 and _2 reads have equal number of raw read counts
#Function to compare
compare_reads1_2 <- function(Batchread1, Batchread2) {
for (i in seq(2, dim(Batchread1)[1], 2)) {
if (Batchread1[i, ] != Batchread2[i, ]) {
print("inconsistent reads")
}
}
}
#Loop through read directions 1 and 2 to see if they have equal raw read counts
#Do a bit of cleaning to get Batch numbers without read direction
Batches <- ls()
Batches <- Batches[grep(".txt", Batches)]
Batches <- Batches[grep("Batch", Batches)]
Batches_1 <- Batches[grep("_1.txt", Batches)]
Batches_2 <- Batches[grep("_2.txt", Batches)]
Batches <- gsub("_1.txt", "", Batches)
Batches <- gsub("_2.txt", "", Batches)
Batches <- unique(Batches)
#Now you have unique Batch numbers, loop through paired Batch read directions and compare
for (i in Batches_1) {
Batchreadname1 <- get(i)
Batchreadname2 <- get(gsub("_1.txt", "_2.txt", i))
print(i)
print(gsub("_1.txt", "_2.txt", i))
compare_reads1_2(Batchreadname1, Batchreadname2)
}
rawread_2_column <- function(Batch_info, Batch_name) {
read_names <- Batch_info[seq(1, nrow(Batch_info), 2), ]
read_names <- gsub("./", "", read_names)
read_names <- gsub("_1.fastq.gz", "", read_names)
raw_reads <- Batch_info[seq(2, nrow(Batch_info), 2), ]
Batch_new <- data.frame(read_names, raw_reads)
colnames(Batch_new) <- c("ReadName", "RawReads")
Batch_new$RawReads <- as.numeric(as.character(Batch_new$RawReads))
Batch_new$RawReads <- lapply(Batch_new$RawReads, function(x) x / 4)
Batch_new$Batchname <- Batch_name
return(Batch_new)
}
All_batches <- data.frame()
for (i in Batches) {
i <- rawread_2_column(get(paste(i, "_1.txt", sep = "")), i)
All_batches <- rbind(All_batches, i)
}
View(All_batches)
#This function makes clean tables and performs calculation
rawread_2_column <- function(Batch_info, Batch_name) {
read_names <- Batch_info[seq(1, nrow(Batch_info), 2), ]
read_names <- gsub("./", "", read_names)
read_names <- gsub("_1.fastq.gz", "", read_names)
raw_reads <- Batch_info[seq(2, nrow(Batch_info), 2), ]
Batch_new <- data.frame(read_names, raw_reads)
colnames(Batch_new) <- c("ReadName", "RawReads")
Batch_new$RawReads <- as.numeric(as.character(Batch_new$RawReads))
Batch_new$RawReads <- lapply(Batch_new$RawReads, function(x) x/4)
Batch_new$Batchname <- Batch_name
return(Batch_new)
}
All_batches <- data.frame()
for (i in Batches) {
i <- rawread_2_column(get(paste(i, "_1.txt", sep = "")), i)
All_batches <- rbind(All_batches, i)
}
View(All_batches)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
###    Part 1. Raw reads    ###
###    This is one backbone of the table. It will start with sequence names,
###    and raw read counts. ###
#Import reads from both directions, change working directory accordingly
setwd("~/Oxford 2.0/HNF1A/Tables/raw_read_count")
raw_count_files <- list.files(path = ".", pattern = "Batch")
for (i in 1:length(raw_count_files)) assign(raw_count_files[i],
read.csv(raw_count_files[i], header = FALSE))
#Already Checked if all paired Batch files have equal number of lines using wc -l in bash
#Check if fastq _1 and _2 reads have equal number of raw read counts
#Function to compare
compare_reads1_2 <- function(Batchread1, Batchread2) {
for (i in seq(2, dim(Batchread1)[1], 2)) {
if (Batchread1[i, ] != Batchread2[i, ]) {
print("inconsistent reads")
}
}
}
#Loop through read directions 1 and 2 to see if they have equal raw read counts
#Do a bit of cleaning to get Batch numbers without read direction
Batches <- ls()
Batches <- Batches[grep(".txt", Batches)]
Batches <- Batches[grep("Batch", Batches)]
Batches_1 <- Batches[grep("_1.txt", Batches)]
Batches_2 <- Batches[grep("_2.txt", Batches)]
Batches <- gsub("_1.txt", "", Batches)
Batches <- gsub("_2.txt", "", Batches)
Batches <- unique(Batches)
#Now you have unique Batch numbers, loop through paired Batch read directions and compare
for (i in Batches_1) {
Batchreadname1 <- get(i)
Batchreadname2 <- get(gsub("_1.txt", "_2.txt", i))
print(i)
print(gsub("_1.txt", "_2.txt", i))
compare_reads1_2(Batchreadname1, Batchreadname2)
}
#Equal read numbers for both directions in all batches, so:
#Keep numerical values from reads 1 only, move values from these rows to new column
#Divide these lines counts by 4 for actual raw_reads column number
#This function makes clean tables and performs calculation
rawread_2_column <- function(Batch_info, Batch_name) {
read_names <- Batch_info[seq(1, nrow(Batch_info), 2), ]
read_names <- gsub("./", "", read_names)
read_names <- gsub("_1.fastq.gz", "", read_names)
raw_reads <- Batch_info[seq(2, nrow(Batch_info), 2), ]
Batch_new <- data.frame(read_names, raw_reads)
colnames(Batch_new) <- c("ReadName", "RawReads")
Batch_new$RawReads <- as.numeric(as.character(Batch_new$RawReads))
Batch_new$RawReads <- lapply(Batch_new$RawReads, function(x) x / 4)
Batch_new$Batchname <- Batch_name
return(Batch_new)
}
All_batches <- data.frame()
for (i in Batches) {
i <- rawread_2_column(get(paste(i, "_1.txt", sep = "")), i)
All_batches <- rbind(All_batches, i)
}
#Save All_batches.
All_batches <- as.data.frame(All_batches)
write.csv(All_batches, file = "All_batches_raw_reads.txt", row.names = TRUE)
###    Part 1. Finished.    ###
###    Part 2. Get RG_info.    ###
###    This is the other backbone of the table. RG_info files allow linking between
###    sequence name, sample name, and all other read count columns.
#Import RG_info tables
setwd("~/Oxford 2.0/HNF1A/Tables")
RG_info1 <- read.table("RG_info1")
RG_info2 <- read.table("RG_info2a")
RG_info2second <- read.table( ("RG_info2b"))
RG_info3 <- read.table("RG_info3")
RG_info4 <- read.table("RG_info4")
RG_info1$Batch <- as.factor("Batch1")
RG_info2$Batch <- as.factor("Batch2")
RG_info2second$Batch <- as.factor("Batch2second")
RG_info3$Batch <- as.factor("Batch3")
RG_info4$Batch <- as.factor("Batch4")
#Make a list of df's to edit all at once later
my.list <- list(RG_info1, RG_info2, RG_info2second, RG_info3, RG_info4)
#slim down the tables, keep name, date and batch. Bind df's and reformat column names.
select_column <- function(y) {
z <- subset(y, select = c(V1, V3, V7, Batch))
return(z)
}
my.list <- lapply(my.list, select_column)
RG_infoAll <- do.call(rbind, my.list)
#Tested if all values in RG_infoAll$V1 are unique, they are, so can be mapped directly to All_batches
#Link read filename to sample name
Mastertable <- merge(RG_infoAll, All_batches, by.x = "V1", by.y = "ReadName")
Mastertable <- Mastertable[, -4]
Mastertable <- Mastertable[, c(2, 5, 1, 3, 4)]
colnames(Mastertable) <- c("Name", "BatchName", "ReadNumber", "Date", "RawReads")
Mastertable$Name <- gsub('SM="', "", Mastertable$Name)
Mastertable$Name <- gsub('"', "", Mastertable$Name)
#Test to see if unique. Answer: No.
#They are unique between batches, see quick_check script for proof!
###    Part 2. Finished.    ###
###    Part 3. Add quantitative info from summary tables.    ###
###    This is some of the required quantitative data. (TPM and Trimmed not included)
#Import the quantitative data separately. This is a function that does that:
create_df_list <- function(directory) {
setwd(directory)
temp <- list.files(pattern = "*.summary")
batch_quant_list <- lapply(
setNames(temp, make.names(gsub("*.gene.counts.summary", "", temp))),
function(x) read.csv(x, stringsAsFactors = FALSE, header = F)[-1, ])
return(batch_quant_list)
}
#Apply function to directories containing Batches
Batch1and2_df_list <- create_df_list(
"~/Oxford 2.0/HNF1A/Tables/merged_counts/gene_counts_merged")
Batch2second_df_list <- create_df_list(
"~/Oxford 2.0/HNF1A/Tables/merged_counts/gene_counts_Batch2/")
Batch3_df_list <- create_df_list(
"~/Oxford 2.0/HNF1A/Tables/merged_counts/gene_counts_Batch3/")
Batch4_df_list <- create_df_list(
"~/Oxford 2.0/HNF1A/Tables/merged_counts/gene_counts_Batch4/")
View(Batch4_df_list)
getwd()
setwd("~/Oxford 2.0/Scripts/HNF1A")
lint("2.large_table.R")
lint("2.large_table.R")
lint("2.large_table.R")
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
